server.port=10080

spring.http.encoding.charset=utf-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true
#�����bean����֮ǰ�����bean
spring.main.allow-bean-definition-overriding=true

#��������Դ(ˮƽ�ֱ�)

spring.shardingsphere.datasource.names=m0,m1,m2
#����Դ1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/order_db
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456
#����Դ2
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/db
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456
#����Դ3(��ֱ�ֿ�)
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/database0
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=123456

sharding.jdbc.datasource.m1.initial-size=8
sharding.jdbc.datasource.m1.min-idle=5
sharding.jdbc.datasource.m1.max-active=10
sharding.jdbc.datasource.m1.query-timeout=6000
sharding.jdbc.datasource.m1.transaction-query-timeout=6000
sharding.jdbc.datasource.m1.remove-abandoned-timeout=1800
sharding.jdbc.datasource.m1.filter-class-names=stat
sharding.jdbc.datasource.m1.filters=stat,config
sharding.jdbc.datasource.m1.testOnBorrow=false
#ָ��t_order������ݷֲ�������������ݽڵ�{1..2}�滻$����m1.t_order_1��m1.t_order_2��t_order�߼�����
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes= m$->{1..2}.t_order_$->{1..2}
#��ֱ�ֿ����ݽڵ�
spring.shardingsphere.sharding.tables.goods.actual-data-nodes= m0.goods_0

#ָ��t_order����������ɲ���

spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#ָ��t_order�ķ�Ƭ���ԣ���Ƭ���԰�����Ƭ���ͷ�Ƭ�㷨(order_idΪż������t_order_1��������t_order_2)
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id%2+1}

spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=m$->{user_id%2+1}

#������־
spring.shardingsphere.props.sql.show=true
logging.level.root=info
logging.level.com.cigit.dao=debug





